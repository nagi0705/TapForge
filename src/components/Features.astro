---
import { features, pricingPlans, regularPricingPlans } from "../config/features";
import { loadTranslation, getLocaleFromPathname, createTranslator } from '../utils/i18n';
import type { Language } from '../lib/i18n';

interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const locale = lang || getLocaleFromPathname(Astro.url.pathname);
const translations = await loadTranslation(locale);
const t = translations.features;
---

<section id="features" class="py-20 bg-white">
  <div class="container mx-auto px-4">
    <div class="text-center mb-16">
      <div class="flex items-center justify-center mb-4">
        <img
          src="/images/favicon.png"
          alt="TapForge"
          class="w-12 h-12 rounded-lg mr-3"
        />
        <h2
          class="text-3xl md:text-4xl font-bold text-gray-900"
          id="features-title"
        >
          {t.title}
        </h2>
      </div>
      <p class="text-xl text-gray-600" id="features-subtitle">
        {t.subtitle}
      </p>
    </div>

    <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8" id="features-grid">
      {
        Object.entries(t.items).map(([key, item], index) => {
          const feature = features.find(f => f.id === key.replace(/([A-Z])/g, '-$1').toLowerCase().replace(/^-/, ''));
          return (
            <div class="text-center p-6 rounded-xl hover:shadow-lg transition-shadow">
              <div
                class={`w-16 h-16 ${feature?.icon.bgColor || 'bg-blue-100'} rounded-full flex items-center justify-center mx-auto mb-4`}
              >
                <svg
                  class={`w-8 h-8 ${feature?.icon.iconColor || 'text-blue-600'}`}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d={feature?.icon.svgPath || "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"}
                  />
                </svg>
              </div>
              <h3
                class="text-lg font-semibold text-gray-900 mb-2"
                id={`feature-${index}-title`}
              >
                {item.title}
              </h3>
              <p
                class="text-gray-600 text-sm"
                id={`feature-${index}-description`}
              >
                {item.description}
              </p>
            </div>
          );
        })
      }
    </div>

    <!-- Pricing Information -->
    <div
      class="mt-16 bg-gradient-to-r from-red-50 to-orange-50 rounded-2xl p-8"
    >
      <div class="text-center">
        <h3 class="text-2xl font-bold text-gray-900 mb-2" id="pricing-title">
          {t.pricing.title}
        </h3>

        <!-- Early Access Counter -->
        <div class="mb-6 inline-block bg-red-100 rounded-full px-6 py-2">
          <span class="text-red-600 font-bold text-lg">
            {t.pricing.earlyAccess}<span id="remaining-slots">100</span>{t.pricing.earlyAccessUnit || '名'}
          </span>
        </div>

        <!-- Early Access Pricing -->
        <div class="mb-8">
          <h4 class="text-xl font-bold text-red-600 mb-4">{t.pricing.earlyAccessTitle}</h4>
          <div
            class="grid md:grid-cols-3 gap-6 max-w-4xl mx-auto"
            id="early-pricing-grid"
          >
            {
              pricingPlans.map((plan, index) => {
                const translatedPlan = t.pricing.plans[plan.id.replace('early-', '')];
                return (
                  <div class="bg-white rounded-lg p-6 shadow-lg border-2 border-red-200">
                    <h4
                      class="font-semibold text-gray-900 mb-2"
                      id={`early-plan-${index}-title`}
                    >
                      {translatedPlan?.title || plan.title}
                    </h4>
                    <div
                      class={`text-2xl font-bold ${plan.priceColor} mb-2`}
                      id={`early-plan-${index}-price`}
                    >
                      {translatedPlan?.price || plan.price}
                    </div>
                    <p
                      class="text-sm text-gray-600"
                      id={`early-plan-${index}-description`}
                    >
                      {translatedPlan?.description || plan.description}
                    </p>
                    {plan.id === "early-monthly" && (
                      <p class="text-sm font-bold text-gray-800 mt-2" id={`early-plan-${index}-note`}>
                        {translatedPlan?.note || "*NFC名刺カード1枚サービス含む"}
                      </p>
                    )}
                  </div>
                );
              })
            }
          </div>
        </div>

        <!-- Regular Pricing -->
        <div class="pt-8 border-t border-gray-300">
          <h4 class="text-lg font-bold text-gray-600 mb-4">{t.pricing.regularTitle}</h4>
          <div
            class="grid md:grid-cols-3 gap-6 max-w-4xl mx-auto opacity-75"
            id="regular-pricing-grid"
          >
            {
              regularPricingPlans.map((plan, index) => {
                const translatedPlan = t.pricing.plans[plan.id.replace('regular-', '')];
                return (
                  <div class="bg-gray-50 rounded-lg p-6 shadow-sm">
                    <h4
                      class="font-semibold text-gray-700 mb-2 text-sm"
                      id={`regular-plan-${index}-title`}
                    >
                      {translatedPlan?.title || plan.title}
                    </h4>
                    <div
                      class={`text-xl font-bold ${plan.priceColor} mb-2`}
                      id={`regular-plan-${index}-price`}
                    >
                      {translatedPlan?.price || plan.price}
                    </div>
                    <p
                      class="text-xs text-gray-500"
                      id={`regular-plan-${index}-description`}
                    >
                      {translatedPlan?.description || plan.description}
                    </p>
                    {plan.id === "regular-monthly" && (
                      <p class="text-xs font-bold text-gray-700 mt-2" id={`regular-plan-${index}-note`}>
                        {translatedPlan?.note || "*NFC名刺カード1枚サービス含む"}
                      </p>
                    )}
                  </div>
                );
              })
            }
          </div>
        </div>

        <!-- Value Proposition -->
        <div class="mt-8 bg-yellow-50 rounded-xl p-4">
          <p class="text-lg font-bold text-yellow-800" id="early-access-benefits-title">
            {translations.benefits?.title || ''}
          </p>
          <div class="flex flex-wrap justify-center gap-4 mt-3 text-sm">
            <span class="text-yellow-700" id="benefit-1">{translations.cta?.features?.noApp || ''}</span>
            <span class="text-yellow-700" id="benefit-2">{translations.cta?.features?.free || ''}</span>
            <span class="text-yellow-700" id="benefit-3">{translations.cta?.features?.multilingual || ''}
          </div>
        </div>
      </div>
    </div>

    <!-- Early Access Counter Script -->
    <script>
      document.addEventListener("DOMContentLoaded", function() {
        // Simulate remaining slots (you can replace this with actual backend data)
        const totalSlots = 100;
        const usedSlots = Math.floor(Math.random() * 30); // Simulate 0-30 slots taken
        const remainingSlots = totalSlots - usedSlots;

        const slotElement = document.getElementById("remaining-slots");
        if (slotElement) {
          slotElement.textContent = remainingSlots.toString();

          // Add urgency styling if slots are running low
          if (remainingSlots < 20) {
            slotElement.parentElement?.classList.add("animate-pulse");
          }
        }
      });
    </script>

    <!-- Demo Video Section -->
    <div class="mt-16 text-center">
      <h3 class="text-2xl font-bold text-gray-900 mb-8" id="demo-title">
        {t.demo.title}
      </h3>
      <div class="bg-gray-100 rounded-2xl p-8 max-w-2xl mx-auto">
        <div
          class="aspect-video bg-gray-200 rounded-lg flex items-center justify-center"
        >
          <div class="text-center">
            <svg
              class="w-16 h-16 text-gray-400 mx-auto mb-4"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"
              ></path>
            </svg>
            <p class="text-gray-600" id="demo-description">
              {t.demo.description}
            </p>
            <p class="text-sm text-gray-500" id="demo-note">
              {t.demo.note}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

